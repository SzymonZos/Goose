name: CMake builds for Mac and Linux

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_call:
    inputs:
      release:
        required: true
        type: boolean
  workflow_dispatch:

jobs:
  build:
    name: ${{matrix.os}}, ${{matrix.compiler}}, ${{matrix.build_type}}, C++${{matrix.cpp_std}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        compiler: [ gcc, clang ]
        build_type: [ Release, Debug ]
        cpp_std: [ "17", "20" ]

    steps:
      - name: Initial checkout
        uses: actions/checkout@v3

      # Workaround for issue with dawidd6/action-download-artifact@v2:
      # https://github.com/dawidd6/action-download-artifact/issues/147#issuecomment-1096127848
      # https://github.com/dawidd6/action-download-artifact/issues/147#issuecomment-1096296334
      - name: Get Run ID
        id: get_run_id
        run: |
          echo "::set-output name=run_id::$(\
            gh run list \
              --workflow release.yml \
              --json databaseId,headSha \
              --jq ". | map(select(.headSha == \"${{github.sha}}\")) | first(.[]).databaseId" \
          )"
          echo "[asdf] begin Run ID:"
          echo "${{steps.get_run_id.outputs.run_id}}"
          echo "[asdf] end"
          sleep 5
          curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/SzymonZos/Goose/actions/artifacts
          sleep 5

        env:
          GITHUB_TOKEN: ${{github.token}}
        if: inputs.release

      - name: Download single header Goose
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: release.yml
          run_id: ${{steps.get_run_id.outputs.run_id}}
          commit: ${{github.sha}}
          name: goose-all
        if: inputs.release

      - name: Replace Goose with amalgamated single header
        run: mv -f goose.hpp ./include/gos/goose.hpp
        if: inputs.release

      - name: Configure compiler
        run: ./ci/config_compiler.sh ${{matrix.compiler}}

      - name: Configure CMake
        run: >
          cmake -B ${{github.workspace}}/build
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
          -DCMAKE_C_COMPILER=${{env.CC}}
          -DCMAKE_CXX_COMPILER=${{env.CXX}}
          -DGOS_BUILD_TESTS=ON
          -DGOS_CXX_STANDARD=${{matrix.cpp_std}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} -- -j 4

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ./test/test-goose
